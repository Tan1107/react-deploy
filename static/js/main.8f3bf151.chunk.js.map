{"version":3,"sources":["components/InputList.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["InputList","props","onChangeValue","el","setState","newToDo","target","value","onAddToDo","addToDo","state","className","name","id","type","placeholder","onChange","this","onClick","Component","ListItem","item","isDoneClass","isDone","onItemClick","List","list","map","index","key","clickItem","toDoList","App","findIndex","toDo","length","newList","console","log","prevProps","prevStates","prevState","snapshot","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4MAEqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZC,QAASF,EAAGG,OAAOC,SATJ,EAYnBC,UAAY,WACV,EAAKP,MAAMQ,QAAQ,EAAKC,MAAML,UAV9B,EAAKK,MAAQ,CACXL,QAAS,IAJM,E,qDAgBjB,OACE,yBAAKM,UAAU,aACb,2BACEA,UAAU,cACVC,KAAK,QACLC,GAAG,QACHC,KAAK,OACLC,YAAY,mBACZC,SAAUC,KAAKf,gBAEjB,4BAAQgB,QAASD,KAAKT,WAAtB,Y,GA3B+BW,c,SCElBC,E,uKACT,IACAC,EAASJ,KAAKhB,MAAdoB,KACFC,EAAcD,EAAKE,OAAS,SAAW,GAC7C,OACE,yBAAKZ,UAAS,oBAAeW,IAC3B,kBAAC,IAAD,CAAUJ,QAASD,KAAKhB,MAAMuB,aAAcH,EAAKT,W,GANnBO,aCAjBM,E,uKACT,IAAD,OACP,OACE,yBAAKd,UAAW,QACbM,KAAKhB,MAAMyB,KAAKC,KAAI,SAACxB,EAAIyB,GACxB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLP,KAAMlB,EACNqB,YAAa,kBAAM,EAAKvB,MAAM6B,UAAU3B,EAAGU,e,GATvBM,aCC5BY,EAAW,CACf,CAAElB,GAAI,EAAGD,KAAM,kBAAWW,QAAQ,GAClC,CAAEV,GAAI,EAAGD,KAAM,mBAAUW,QAAQ,IAGdS,E,kDACnB,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAqBR6B,UAAY,SAACjB,GACX,IAAMa,EAAI,YAAO,EAAKhB,MAAMqB,UACtBH,EAAQF,EAAKO,WAAU,SAAC9B,GAAD,OAAQA,EAAGU,KAAOA,MAChC,IAAXe,IACFF,EAAKE,GAAOL,QAAUG,EAAKE,GAAOL,OAClC,EAAKnB,SAAS,CACZ2B,SAAUL,MA5BG,EAiCnBjB,QAAU,SAACyB,GACT,IAAM7B,EAAU,CACdO,KAAMsB,EACNrB,GAAI,EAAKH,MAAMqB,SAASI,OACxBZ,QAAQ,GAEJa,EAAO,sBAAO,EAAK1B,MAAMqB,UAAlB,CAA4B1B,IACzC,EAAKD,SAAS,CACZ2B,SAAUK,KAtCZ,EAAK1B,MAAQ,CACXqB,SAAUA,GAJK,E,gEASjBM,QAAQC,IAAI,e,8CAOUC,EAAWC,GACjC,OAAO,O,yCAGUD,EAAWE,EAAWC,M,+BA0BvC,OACE,yBAAK/B,UAAU,WACb,uCACA,kBAAC,EAAD,CAAWF,QAASQ,KAAKR,UACzB,kBAAC,EAAD,CACEG,KAAK,QACLc,KAAMT,KAAKP,MAAMqB,SACjBD,UAAWb,KAAKa,YAElB,yBAAKnB,UAAU,UAAf,QACQM,KAAKP,MAAMqB,SAASY,QAAO,SAACxC,GAAD,OAAsB,IAAdA,EAAGoB,UAAiBY,OAD/D,IAEGlB,KAAKP,MAAMqB,SAASI,Y,gDA7CGlC,EAAOS,GACrC,OAAOA,M,GAdsBS,aCEbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.8f3bf151.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class InputList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newToDo: \"\",\r\n    };\r\n  }\r\n  onChangeValue = (el) => {\r\n    this.setState({\r\n      newToDo: el.target.value,\r\n    });\r\n  };\r\n  onAddToDo = () => {\r\n    this.props.addToDo(this.state.newToDo);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"inputForm\">\r\n        <input\r\n          className=\"input-group\"\r\n          name=\"to do\"\r\n          id=\"fname\"\r\n          type=\"text\"\r\n          placeholder=\"Please add to do\"\r\n          onChange={this.onChangeValue}\r\n        ></input>\r\n        <button onClick={this.onAddToDo}>Add</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Checkbox } from \"antd\";\r\nimport \"./styles.css\";\r\n\r\nexport default class ListItem extends Component {\r\n  render() {\r\n    const { item } = this.props;\r\n    const isDoneClass = item.isDone ? \"isDone\" : \"\";\r\n    return (\r\n      <div className={`list-item ${isDoneClass}`}>\r\n        <Checkbox onClick={this.props.onItemClick}>{item.name}</Checkbox>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ListItem from \"./ListItem\";\r\nimport \"./styles.css\";\r\n\r\nexport default class List extends Component {\r\n  render() {\r\n    return (\r\n      <div className =\"list\">\r\n        {this.props.list.map((el, index) => {\r\n          return (\r\n            <ListItem\r\n              key={index}\r\n              item={el}\r\n              onItemClick={() => this.props.clickItem(el.id)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./components/styles.css\"\nimport InputList from \"./components/InputList\";\nimport List from \"./components/List\";\n\nconst toDoList = [\n  { id: 0, name: \"Dọn Nhà\", isDone: false },\n  { id: 1, name: \"Nấu ăn\", isDone: false },\n];\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toDoList: toDoList,\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"did mount\");\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return state;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevStates) {\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  clickItem = (id) => {\n    const list = [...this.state.toDoList];\n    const index = list.findIndex((el) => el.id === id);\n    if (index !== -1) {\n      list[index].isDone = !list[index].isDone;\n      this.setState({\n        toDoList: list,\n      });\n    }\n  };\n\n  addToDo = (toDo) => {\n    const newToDo = {\n      name: toDo,\n      id: this.state.toDoList.length,\n      isDone: false,\n    };\n    const newList = [...this.state.toDoList, newToDo];\n    this.setState({\n      toDoList: newList,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"toDoApp\">\n        <p>TODO APP</p>\n        <InputList addToDo={this.addToDo} />\n        <List\n          name=\"To Do\"\n          list={this.state.toDoList}\n          clickItem={this.clickItem}\n        />\n        <div className=\"footer\">\n          Done {this.state.toDoList.filter((el) => el.isDone === true).length}/\n          {this.state.toDoList.length}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}